import streamlit as st
import pandas as pd
import json
from pathlib import Path
import base64

st.markdown("""
    <style>
    [data-testid="stToolbar"] {visibility: hidden !important;}
    #MainMenu {visibility: hidden !important;}
    footer {visibility: hidden !important;}
    </style>
""", unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="NHANES Data Explorer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title(":material/bar_chart: NHANES Data Explorer")
st.markdown("**:material/map: –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö National Health and Nutrition Examination Survey**")

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_DIRS = {
    'csv': Path('csv'),
    'txt': Path('txt'),
    'htm': Path('htm')
}

@st.cache_data
def load_nhanes_structure():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö NHANES –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('nhanes_grouped_ru.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error("–§–∞–π–ª nhanes_grouped_ru.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def get_file_path(data_type, code):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if data_type not in DATA_DIRS:
        return None

    file_path = DATA_DIRS[data_type] / f"{code}.{data_type}"
    return file_path if file_path.exists() else None

def load_csv_file(code):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª"""
    file_path = get_file_path('csv', code)
    if file_path:
        try:
            df = pd.read_csv(file_path)
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def load_txt_file(code):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å TXT —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    file_path = get_file_path('txt', code)
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TXT —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def load_htm_file(code):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å HTM —Ñ–∞–π–ª"""
    file_path = get_file_path('htm', code)
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTM —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def create_download_link(df, filename):
    """–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è DataFrame –∫–∞–∫ CSV"""
    csv = df.to_csv(index=False, encoding='utf-8')
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}"><span class="material-icons" style="vertical-align:middle;">download</span> –°–∫–∞—á–∞—Ç—å {filename}</a>'
    return href

def main():
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    nhanes_data = load_nhanes_structure()

    if not nhanes_data:
        st.stop()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title(":material/explore: –ù–∞–≤–∏–≥–∞—Ü–∏—è")

    # –í—ã–±–æ—Ä –≥–æ–¥–∞
    years = list(nhanes_data.keys())
    selected_year = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
        years,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è NHANES"
    )

    if selected_year in nhanes_data:
        year_data = nhanes_data[selected_year]

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = list(year_data.keys())
        selected_category = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            categories,
            help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ, –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –∏ —Ç.–¥.)"
        )

        if selected_category in year_data:
            category_data = year_data[selected_category]

            # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if category_data:
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                options = []
                code_to_item = {}

                for item in category_data:
                    code = item['code']
                    desc_ru = item.get('ru', item.get('desc', code))
                    display_text = f"{code}: {desc_ru}"
                    options.append(display_text)
                    code_to_item[display_text] = item

                selected_option = st.sidebar.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:",
                    options,
                    help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )

                if selected_option:
                    selected_item = code_to_item[selected_option]
                    code = selected_item['code']

                    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
                    st.header(f":material/assignment: {selected_item.get('ru', selected_item.get('desc', code))}")

                    col1, col2 = st.columns([2, 1])

                    with col1:
                        st.subheader(":material/info: –û–ø–∏—Å–∞–Ω–∏–µ")
                        st.write(f"**–ö–æ–¥:** {code}")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ (EN):** {selected_item.get('desc', 'N/A')}")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ (RU):** {selected_item.get('ru', 'N/A')}")
                        st.write(f"**–ì–æ–¥:** {selected_year}")
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {selected_category}")

                    with col2:
                        st.subheader(":material/folder: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
                        csv_exists = get_file_path('csv', code) is not None
                        txt_exists = get_file_path('txt', code) is not None
                        htm_exists = get_file_path('htm', code) is not None

                        if csv_exists:
                            st.success(":material/check_circle: CSV –¥–∞–Ω–Ω—ã–µ")
                        else:
                            st.warning(":material/cancel: CSV –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

                        if txt_exists:
                            st.success(":material/check_circle: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (TXT)")
                        else:
                            st.warning(":material/cancel: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

                        if htm_exists:
                            st.success(":material/check_circle: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (HTM)")
                        else:
                            st.warning(":material/cancel: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

                    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if csv_exists or txt_exists or htm_exists:
                        tab_names = []
                        if csv_exists:
                            tab_names.append(":material/table_chart: –î–∞–Ω–Ω—ã–µ (CSV)")
                        if txt_exists:
                            tab_names.append(":material/description: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (TXT)")
                        if htm_exists:
                            tab_names.append(":material/public: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (HTM)")

                        if tab_names:
                            tabs = st.tabs(tab_names)
                            tab_index = 0

                            # –í–∫–ª–∞–¥–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö
                            if csv_exists:
                                with tabs[tab_index]:
                                    st.subheader(":material/table_chart: –î–∞–Ω–Ω—ã–µ CSV")

                                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                                    df = load_csv_file(code)

                                    if df is not None:
                                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
                                        col1, col2, col3 = st.columns(3)
                                        with col1:
                                            st.metric("–°—Ç—Ä–æ–∫", len(df))
                                        with col2:
                                            st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(df.columns))
                                        with col3:
                                            st.metric("–†–∞–∑–º–µ—Ä", f"{df.memory_usage(deep=True).sum() / 1024:.1f} KB")

                                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                        st.markdown(create_download_link(df, f"{code}.csv"), unsafe_allow_html=True)

                                        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                                        st.subheader(":material/search: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
                                        st.dataframe(df.head(10), use_container_width=True)

                                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
                                        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º"):
                                            st.subheader(":material/insights: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º")
                                            numeric_cols = df.select_dtypes(include=['number']).columns
                                            if len(numeric_cols) > 0:
                                                st.dataframe(df[numeric_cols].describe(), use_container_width=True)
                                            else:
                                                st.info("–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                                    else:
                                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª")

                                tab_index += 1

                            # –í–∫–ª–∞–¥–∫–∞ TXT –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                            if txt_exists:
                                with tabs[tab_index]:
                                    st.subheader(":material/description: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

                                    txt_content = load_txt_file(code)
                                    if txt_content:
                                        st.text_area("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:", txt_content, height=400, disabled=True)
                                    else:
                                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

                                tab_index += 1

                            # –í–∫–ª–∞–¥–∫–∞ HTM –æ–ø–∏—Å–∞–Ω–∏—è
                            if htm_exists:
                                with tabs[tab_index]:
                                    st.subheader(":material/public: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

                                    htm_content = load_htm_file(code)
                                    if htm_content:
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                                        st.components.v1.html(htm_content, height=600, scrolling=True)
                                    else:
                                        st.error(":material/error: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML –æ–ø–∏—Å–∞–Ω–∏–µ")
                    else:
                        st.warning(":material/block: –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                st.info(":material/info: –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        else:
            st.error(":material/error: –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        st.error(":material/error: –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.markdown("---")
    st.sidebar.subheader(":material/menu_book: –û NHANES")
    st.sidebar.markdown("""
    **NHANES (National Health and Nutrition Examination Survey)** -
    –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–∏—Ç–∞–Ω–∏—è –≤ –°–®–ê.

    –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:
    - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã
    - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    - –û–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–∏—Ç–∞–Ω–∏–∏
    - –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """)

    st.sidebar.markdown("---")
    st.sidebar.subheader(":material/settings: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_years = len(nhanes_data)
    total_categories = sum(len(year_data) for year_data in nhanes_data.values())
    total_datasets = sum(
        len(category_data)
        for year_data in nhanes_data.values()
        for category_data in year_data.values()
    )

    st.sidebar.metric("–ì–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", total_years)
    st.sidebar.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏–π", total_categories)
    st.sidebar.metric("–ù–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö", total_datasets)

if __name__ == "__main__":
    main()
